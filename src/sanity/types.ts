// Query TypeMap
import "@sanity/client";

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Sequel = {
  _id: string;
  _type: "sequel";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  movies: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "Movie-studio";
  }>;
};

export type MovieStudio = {
  _id: string;
  _type: "Movie-studio";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  imdbID: string;
  getFilmData?: string;
  filmName: string;
  slug: Slug;
  movieTime: number;
  imdbpuan: number;
  releaseDate: number;
  directed: string;
  actors: string;
  genre: Array<string>;
  country: string;
  poster: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  posterSearch?: string;
  description: string;
  generateDescription?: string;
  EnglishLink: boolean;
  EnglishSubtitleLink: boolean;
  TurkishLink: string;
  TurkishSubtitleLink: string;
  FraqmanLink: string;
  youtubeSearchLink?: string;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes =
  | Sequel
  | MovieStudio
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/data-access/sanity/movies/get.ts
// Variable: MoviesQuery
// Query: *[_type == 'Movie-studio']       | order(_createdAt desc) {        filmName,        "poster": poster.asset->url,        "posterlqip": poster.asset->metadata.lqip,        "slug": slug.current,        _id,        imdbpuan,        _updatedAt,        imdbID,        releaseDate      }
export type MoviesQueryResult = Array<{
  filmName: string;
  poster: string | null;
  posterlqip: string | null;
  slug: string;
  _id: string;
  imdbpuan: number;
  _updatedAt: string;
  imdbID: string;
  releaseDate: number;
}>;
// Variable: MovieQuery
// Query: *[_type == 'Movie-studio' && slug.current == $slug][0] {      filmName,      "poster": poster.asset->url,      "posterlqip": poster.asset->metadata.lqip,      "slug": slug.current,      imdbpuan,      releaseDate,      genre,      description,      _id,      directed,      country,      movieTime,      imdbID,      EnglishLink,      EnglishSubtitleLink,      FraqmanLink,      TurkishLink,      TurkishSubtitleLink,      actors    }
export type MovieQueryResult = {
  filmName: string;
  poster: string | null;
  posterlqip: string | null;
  slug: string;
  imdbpuan: number;
  releaseDate: number;
  genre: Array<string>;
  description: string;
  _id: string;
  directed: string;
  country: string;
  movieTime: number;
  imdbID: string;
  EnglishLink: boolean;
  EnglishSubtitleLink: boolean;
  FraqmanLink: string;
  TurkishLink: string;
  TurkishSubtitleLink: string;
  actors: string;
} | null;
// Variable: RecentlyAddedMoviesQuery
// Query: *[_type == 'Movie-studio']       | order(_createdAt desc)[0...10] {        filmName,        "poster": poster.asset->url,        "posterlqip": poster.asset->metadata.lqip,        "slug": slug.current,        imdbpuan,        releaseDate      }
export type RecentlyAddedMoviesQueryResult = Array<{
  filmName: string;
  poster: string | null;
  posterlqip: string | null;
  slug: string;
  imdbpuan: number;
  releaseDate: number;
}>;

// Source: ./src/data-access/sanity/sequel/get.ts
// Variable: SequelQuery
// Query: *[_type == "sequel" && references($movieID)][0] {      name,      "movies": movies[]->         | order(releaseDate desc) {          filmName,          "slug": slug.current,          "poster": poster.asset->url,          "posterlqip": poster.asset->metadata.lqip        }    }
export type SequelQueryResult = {
  name: string;
  movies: Array<{
    filmName: string;
    slug: string;
    poster: string | null;
    posterlqip: string | null;
  }>;
} | null;

declare module "@sanity/client" {
  interface SanityQueries {
    '\n    *[_type == \'Movie-studio\'] \n      | order(_createdAt desc) {\n        filmName,\n        "poster": poster.asset->url,\n        "posterlqip": poster.asset->metadata.lqip,\n        "slug": slug.current,\n        _id,\n        imdbpuan,\n        _updatedAt,\n        imdbID,\n        releaseDate\n      }\n  ': MoviesQueryResult;
    '\n    *[_type == \'Movie-studio\' && slug.current == $slug][0] {\n      filmName,\n      "poster": poster.asset->url,\n      "posterlqip": poster.asset->metadata.lqip,\n      "slug": slug.current,\n      imdbpuan,\n      releaseDate,\n      genre,\n      description,\n      _id,\n      directed,\n      country,\n      movieTime,\n      imdbID,\n      EnglishLink,\n      EnglishSubtitleLink,\n      FraqmanLink,\n      TurkishLink,\n      TurkishSubtitleLink,\n      actors\n    }\n  ': MovieQueryResult;
    '\n    *[_type == \'Movie-studio\'] \n      | order(_createdAt desc)[0...10] {\n        filmName,\n        "poster": poster.asset->url,\n        "posterlqip": poster.asset->metadata.lqip,\n        "slug": slug.current,\n        imdbpuan,\n        releaseDate\n      }\n  ': RecentlyAddedMoviesQueryResult;
    '\n    *[_type == "sequel" && references($movieID)][0] {\n      name,\n      "movies": movies[]-> \n        | order(releaseDate desc) {\n          filmName,\n          "slug": slug.current,\n          "poster": poster.asset->url,\n          "posterlqip": poster.asset->metadata.lqip\n        }\n    }\n  ': SequelQueryResult;
  }
}

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Sequel = {
  _id: string;
  _type: "sequel";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  movies?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "Movie-studio";
  }>;
};

export type MovieStudio = {
  _id: string;
  _type: "Movie-studio";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  filmName?: string;
  slug?: Slug;
  imdbID?: string;
  poster?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  posterSearch?: string;
  movieTime?: number;
  imdbpuan?: number;
  releaseDate?: number;
  directed?: string;
  actors?: string;
  genre?: Array<string>;
  country?: string;
  description?: string;
  generateDescription?: string;
  EnglishLink?: boolean;
  EnglishSubtitleLink?: boolean;
  TurkishLink?: string;
  TurkishSubtitleLink?: string;
  FraqmanLink?: string;
  youtubeSearchLink?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Sequel
  | MovieStudio
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/lib/utils.ts
// Variable: SLUGS_QUERY
// Query: *[_type=='Movie-studio']|order(_createdAt desc)      {"slug": slug.current}
export type SLUGS_QUERYResult = Array<{
  slug: string | null;
}>;
// Variable: SITEMAP_DATA_QUERY
// Query: *[_type=='Movie-studio']      {"slug": slug.current, _updatedAt}
export type SITEMAP_DATA_QUERYResult = Array<{
  slug: string | null;
  _updatedAt: string;
}>;
// Variable: RECENT_MOVIES_QUERY
// Query: *[_type=='Movie-studio']|order(_createdAt desc)      {filmName, poster, "slug": slug.current, imdbpuan, releaseDate}[0...10]
export type RECENT_MOVIES_QUERYResult = Array<{
  filmName: string | null;
  poster: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  slug: string | null;
  imdbpuan: number | null;
  releaseDate: number | null;
}>;
// Variable: COUNT_QUERY
// Query: count(*[_type == "Movie-studio"])
export type COUNT_QUERYResult = number;
// Variable: MOVIES_QUERY
// Query: *[_type=='Movie-studio']|order(_createdAt desc){filmName, "poster": poster.asset->url, slug, _id, imdbpuan, imdbID, releaseDate}
export type MOVIES_QUERYResult = Array<{
  filmName: string | null;
  poster: string | null;
  slug: Slug | null;
  _id: string;
  imdbpuan: number | null;
  imdbID: string | null;
  releaseDate: number | null;
}>;
// Variable: MOVIE_QUERY
// Query: *[_type=='Movie-studio' && slug.current==$slug]      {filmName, "poster": poster.asset->url, "slug": slug.current, imdbpuan, releaseDate, genre, description, _id, directed, country, movieTime, imdbID, EnglishLink, EnglishSubtitleLink, FraqmanLink, TurkishLink, TurkishSubtitleLink, actors}[0]
export type MOVIE_QUERYResult = {
  filmName: string | null;
  poster: string | null;
  slug: string | null;
  imdbpuan: number | null;
  releaseDate: number | null;
  genre: Array<string> | null;
  description: string | null;
  _id: string;
  directed: string | null;
  country: string | null;
  movieTime: number | null;
  imdbID: string | null;
  EnglishLink: boolean | null;
  EnglishSubtitleLink: boolean | null;
  FraqmanLink: string | null;
  TurkishLink: string | null;
  TurkishSubtitleLink: string | null;
  actors: string | null;
} | null;
// Variable: SEQUEL_QUERY
// Query: *[_type == "sequel" && references($movieID)] {          name,          "movies": movies[]->{            filmName,            "slug": slug.current,            "poster": poster.asset->url,          }        }
export type SEQUEL_QUERYResult = Array<{
  name: string | null;
  movies: Array<{
    filmName: string | null;
    slug: string | null;
    poster: string | null;
  }> | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type=='Movie-studio']|order(_createdAt desc)\n      {\"slug\": slug.current}": SLUGS_QUERYResult;
    "*[_type=='Movie-studio']\n      {\"slug\": slug.current, _updatedAt}": SITEMAP_DATA_QUERYResult;
    "*[_type=='Movie-studio']|order(_createdAt desc)\n      {filmName, poster, \"slug\": slug.current, imdbpuan, releaseDate}[0...10]": RECENT_MOVIES_QUERYResult;
    'count(*[_type == "Movie-studio"])': COUNT_QUERYResult;
    "*[_type=='Movie-studio']|order(_createdAt desc){filmName, \"poster\": poster.asset->url, slug, _id, imdbpuan, imdbID, releaseDate}": MOVIES_QUERYResult;
    '*[_type==\'Movie-studio\' && slug.current==$slug]\n      {filmName, "poster": poster.asset->url, "slug": slug.current, imdbpuan, releaseDate, genre, description, _id, directed, country, movieTime, imdbID, EnglishLink, EnglishSubtitleLink, FraqmanLink, TurkishLink, TurkishSubtitleLink, actors}[0]': MOVIE_QUERYResult;
    '*[_type == "sequel" && references($movieID)] {\n          name,\n          "movies": movies[]->{\n            filmName,\n            "slug": slug.current,\n            "poster": poster.asset->url,\n          }\n        }': SEQUEL_QUERYResult;
  }
}
